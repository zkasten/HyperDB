import os
import json
import pandas as pd
import requests
import time
import numpy as np

API_KEY = "patRgTOFAFiFMy6Yw.1fb5dc5717d88354eb7f4f5c6dd76a7907d5a656fd925d80b0201852117f82a3"
BASE_ID = "entbiilze8Kao2jYh"
#TABLE_NAME = "edtv7pdm8oBXZHeDw"
TABLE_NAME = "edtueXMHbUcHpDN6U"

url_set_records = f"https://api.airtable.com/v0/{BASE_ID}/{TABLE_NAME}/upsertRecords"

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

#df = pd.DataFrame(pd.read_excel("ASIAN_CA_PO_Suggest_DEV.xlsx"))
#df = pd.DataFrame(pd.read_excel("ASIAN_CA_PO_Suggest.xlsx"))
df = pd.DataFrame(pd.read_excel("ASIAN_CA_PO_Suggest.xlsx"))


drop_idx = df[df['Item'] == 'INVADJGROASIAN'].index
if not drop_idx.empty:
    df = df.drop(drop_idx)

df = df.dropna(subset=['Item'])

df['Item'] = df['Item'].astype(int)
df['Item'] = df['Item'].astype(str)
df['Location'] = 'CA'
df['Date'] = '072825'
df['Category'] ='ASIAN'

df = df.fillna('')
#print(df.columns)
#for col in df.columns:
#    print(f"Column: {col}, Type: {df[col].dtype}")
    
#df.columns = df.columns.str.replace(r'\n', ' ', regex=True)
df.columns = df.columns.astype(str).str.replace(r'\n', ' ', regex=True)
df.columns = df.columns.astype(str).str.replace(r'\s+', ' ', regex=True)
df = df.astype(str)
#df = df.astype({
#    'Description': 'str',
#    'Report Category': 'str',
#    'S': 'str',
##    'Stock Pallet Qty': 'str',
##    'On-order Qty': 'str',
##    'Cur Turn Over': 'str',
##    '현재고 Turn Over': 'str',
##    'Suggested Order Qty': 'str',
##    'Actual Order GSC Qty': 'str',
##    'Buyer Opinion': 'str',
##    '도착시 Turn Over(week)': 'str',
#    'buyer': 'str',
#    'categoryL1': 'str',
##    'Free': 'str',
##    'On Order': 'str',
##    'CW.1': 'str',
##    'C+1W.1': 'str',
##    'C+2W.1': 'str',
##    'C+3W.1': 'str',
##    'C+4W.1': 'str',
##    'C+5W.1': 'str',
##    'C+6W.1': 'str',
##    'C+7W.1': 'str',
##    'C+8W.1': 'str',
##    'C+9W.1': 'str',
##    'C+10W.1': 'str',
##    'C+11W.1': 'str',
##    'C+12W.1': 'str',
##    'C+13W.1': 'str',
##    'C+14W.1': 'str',
##    'C+15W.1': 'str',
##    'C+16W.1': 'str',
##    'C+17W.1': 'str',
##    'C+18W.1': 'str',
##    'C+19W.1': 'str',
##    'C+20W.1': 'str',
##    'C+21W.1': 'str',
##    'C+22W.1': 'str',
#    'PO': 'str'
#
#})

cols_to_drop = df.columns[df.columns.str.contains('210')]
df = df.drop(columns=cols_to_drop)


#for col in df.columns:
#    print(f"Updated Column: {col}")

#print(df.columns)
#print("-------------original xlsx-----------------")
#print(df)
#print("-------------original xlsx-end-------------")

record_arr = []
i = 0
for index, row in df.iterrows():
    dic = {}
    dic["primaryKey"] = str(row["Item"])

    #print(type(row))
#    row = row.replace(r'\\n', ' ', regex=True)
#    print("-------------row-----------------")
#    print(row)
#    print("-------------row-end-------------")
    dic["fields"] = row.to_dict()
    record_arr.append(dic)
    i += 1
    if i > 990:
        break
    
    # print(json.dumps(dic))

record = {}
record["records"] = record_arr
#record["records"] = [{"primaryKey": "1314101085", "fields": {"Item": "1314101085", "Description": "NATURES GRAIN COOKED WHITE RICE "}}, {"primaryKey": "1314101086", "fields": {"Item": "1314101086", "Description": "NATURES GRAIN COOKED WHITE RICE NEW "}}]
#record["records"] = [{"primaryKey": "1314101085", "fields": {"Item": "1314101085", "Description": "NATURES GRAIN COOKED WHITE RICE 7.4OZ(210G)/12/1 \uc790\uc5f0\ubbf8 \ud55c\uad6d\uc0b0 \ud770\uc300\ubc25 12PK NEW", "Report Category": 0.0, "\ubbf8\ucde8\uae09\nTOSS\n\uc9c0\uc790\uccb4": 0.0, "B1\n4wks": 1360.5, "B1\n13Wk": 1323.15, "S\n4wks": 1410.75, "S\n13wks": 1157.38, "TR\n4wks": 0.0, "TR\n13wks": 0.0, "B1": "", "7": 938.23, "8": 1384.37, "9": 1513.4, "10": 489.53, "11": 1767.73, "12": 1459.03, "1": 889.0, "2": 398.77, "3": 1437.33, "4": 896.23, "5": 1062.6, "6": 1762.83, "S": "", "7.1": 653.8, "8.1": 1048.83, "9.1": 1165.27, "10.1": 526.4, "11.1": 1147.77, "12.1": 1013.83, "1.1": 799.4, "2.1": 311.97, "3.1": 1030.4, "4.1": 635.13, "5.1": 850.97, "6.1": 1540.0, "Buyer's \nDecision": 1360.5, "Stock \nQty": 6734.0, "Case/Pallet": 0.0, "Stock Pallet Qty": 0.0, "On-order \nQty": 12480.0, "Cur \n Turn Over": 14.1227489893422, "\ud604\uc7ac\uace0 \n Turn Over": 4.94965086365307, "Suggested \nOrder Qty": 0.0, "Actual Order \nGSC Qty": "", "Buyer \nOpinion": "", "\ub3c4\ucc29\uc2dc Turn Over(week)": 14.1227489893422, "Lead Time \n(Week)": 0.0, "\ucd5c\uc18c\uc7ac\uace0\n(Week)": 0.0, "\ubc1c\uc8fc\ub2e8\uc704\n(Week)": 0.0, "Max\uc7ac\uace0\n(Week)": 0.0, "ReOrder Point \n(Week)": 0.0, "buyer": 0.0, "categoryL1": "INSTANT RICE, CUP RICE", "UPC": 84603401489.0, "Free": "", "On Order": "", "CW": 0.0, "C+1W": 0.0, "C+2W": 0.0, "C+3W": 0.0, "C+4W": 0.0, "C+5W": 4920.0, "C+6W": 0.0, "C+7W": 5040.0, "C+8W": 0.0, "C+9W": 0.0, "C+10W": 0.0, "C+11W": 0.0, "C+12W": 2520.0, "C+13W": 0.0, "C+14W": 0.0, "C+15W": 0.0, "C+16W": 0.0, "C+17W": 0.0, "C+18W": 0.0, "C+19W": 0.0, "C+20W": 0.0, "C+21W": 0.0, "C+22W": 0.0, "After 22W": 0.0, "INV\nFCST": "", "CW.1": 5373.5, "C+1W.1": 4013.0, "C+2W.1": 2652.5, "C+3W.1": 1292.0, "C+4W.1": 0.0, "C+5W.1": 3559.5, "C+6W.1": 2199.0, "C+7W.1": 5878.5, "C+8W.1": 4518.0, "C+9W.1": 3157.5, "C+10W.1": 1797.0, "C+11W.1": 436.5, "C+12W.1": 1596.0, "C+13W.1": 235.5, "C+14W.1": 0.0, "C+15W.1": 0.0, "C+16W.1": 0.0, "C+17W.1": 0.0, "C+18W.1": 0.0, "C+19W.1": 0.0, "C+20W.1": 0.0, "C+21W.1": 0.0, "C+22W.1": 0.0, "PO": "", "210678826": 0, "210275906": 0, "210672824": 0, "210680517": 0, "210679779": 0, "210673606": 0, "210671918": 0, "210677169": 0, "210677166": 0, "210677462": 0, "210677163": 0, "210677170": 0, "210275700": 0, "210678101": 0, "210680492": 0, "210680922": 0, "210680923": 0, "210672823": 0, "210678828": 0, "210676604": 0, "210677881": 0, "210677878": 0, "210676603": 0, "210672814": 0, "210672355": 0, "210672072": 0, "210672352": 0, "210677446": 0, "210275701": 0, "210672509": 0, "210680493": 0, "210275702": 0, "210678486": 0, "210674066": 0, "210679537": 0, "210674825": 0, "210679360": 0, "210678829": 0, "210677746": 0, "210678137": 0, "210678139": 0, "210676977": 0, "210676976": 0, "210678134": 0, "210678135": 0, "210670485": 0, "210678107": 0, "210670490": 0, "210672819": 0, "210677153": 0, "210679671": 0, "210676607": 0, "210678509": 0, "210679361": 0, "210679538": 0, "210677182": 0, "210680004": 0, "210679177": 0, "210678115": 0, "210677691": 0, "210677454": 0, "210677675": 0, "210677703": 0, "210678385": 0, "210677088": 0, "210680821": 0, "210673106": 0, "210673088": 0, "210673101": 0, "210673096": 0, "210673099": 0, "210673104": 0, "210673107": 0, "210673089": 0, "210673103": 4920, "210673105": 0, "210677702": 0, "210680320": 0, "210680323": 0, "210680335": 0, "210680336": 0, "210266277": 0, "210680516": 0, "210680513": 0, "210679720": 0, "210680338": 0, "210677448": 0, "210680337": 0, "210680340": 0, "210680322": 0, "210266274": 0, "210680707": 0, "210679539": 0, "210677912": 0, "210679540": 0, "210678116": 0, "210677455": 0, "210674861": 0, "210679724": 0, "210677452": 0, "210675948": 0, "210675852": 0, "210675846": 0, "210675853": 0, "210675856": 0, "210675857": 0, "210675851": 0, "210675947": 0, "210675850": 0, "210675949": 0, "210675858": 0, "210675845": 0, "210675860": 0, "210675855": 0, "210675854": 5040, "210677458": 0, "210268493": 0, "210268490": 0, "210268495": 0, "210268496": 0, "210268494": 0, "210268497": 0, "210678158": 0, "210679756": 0, "210679754": 0, "210679753": 0, "210679757": 0, "210679749": 0, "210680296": 0, "210680318": 0, "210680300": 0, "210680319": 0, "210680317": 0, "210680294": 0, "210680312": 0, "210680292": 0, "210680316": 0, "210680315": 0, "210680314": 0, "210680303": 0, "210680307": 0, "210680306": 0, "210680308": 2520, "210273840": 0}}]

payload = {
    "records": [
        {
            "primaryKey": "1112345", # 검색 및 Upsert의 기준이 될 고유 키
            "fields": {
                "Item": "1112345",   # 실제 테이블의 필드 이름과 값
                "Description": "This is a new description."
            }
        },
        {
            "primaryKey": "1167890",
            "fields": {
                "Item": "1167890",
                "Description": "Another item for upsert."
            }
        }
    ]
}

#print(json.dumps(repcord_arr))
print("-------------record-----------------")
print(json.dumps(record))

try:
    
    response = requests.put(url_set_records, headers=headers, data=json.dumps(record))
    print(response)
    print(response.status_code)
    
    hdb_response = response.json()
    print(hdb_response)

    records = hdb_response.get('records', [])
    print(records)
          

except requests.exceptions.RequestException as e:
    print(response.status_code)
    #print(f"❌ API 요청 중 에러 발생: {e}")
except (KeyError, IndexError) as e:
    print(f"❌ JSON 데이터 처리 중 에러 발생: 응답 형식을 확인하세요. ({e})")

    #print(row['Item'])

    #print(row.to_json())
    #item = row['Item']
    #if pd.isna(item):
    #    continue
    #item = str(item).strip()
    #if not item:
    #    continue
    #print(f"Processing item: {item}")
    #
    # 여기에 Airtable에 업서트하는 로직을 추가합니다.
    # 예를 들어, requests.post()를 사용하여 Airtable API에 데이터를 전송할 수 있습니다.
    